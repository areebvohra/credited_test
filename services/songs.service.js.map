{"version":3,"sources":["../../src/services/songs.service.ts"],"sourcesContent":["// import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\n// import { HttpException } from '@exceptions/httpException';\n// import { User } from '@interfaces/users.interface';\n// import { UserModel } from '@models/users.model';\nimport https from 'https';\n\n@Service()\nexport class SongService {\n  public async findSongById(songId: string, accessToken: string): Promise<any> {\n    const options = {\n      method: 'GET',\n      hostname: 'amp-api.music.apple.com',\n      path: `/v1/catalog/us/songs/${songId}?include=credits`,\n      headers: {\n        Origin: 'https://music.apple.com',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      maxRedirects: 20,\n    };\n\n    return new Promise(function (resolve, reject) {\n      let data = '';\n      const final = [];\n      const request = https.request(options, response => {\n        response.on('data', chunk => {\n          data += chunk;\n        });\n        response.on('end', () => {\n          const result = JSON.parse(data);\n          const credits = result.data[0].relationships.credits.data;\n\n          credits.forEach(element => {\n            const title = element.attributes.title;\n            const names = element.relationships['credit-artists'].data.map(items => items.attributes.name);\n            final.push({ title: title, names: names });\n          });\n          resolve(final);\n        });\n      });\n\n      request.on('error', err => {\n        reject(err);\n      });\n\n      request.end();\n    });\n  }\n\n  // public async createUser(userData: User): Promise<User> {\n  //   const findUser: User = await UserModel.findOne({ email: userData.email });\n  //   if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n  //   const hashedPassword = await hash(userData.password, 10);\n  //   const createUserData: User = await UserModel.create({ ...userData, password: hashedPassword });\n\n  //   return createUserData;\n  // }\n}\n"],"names":["SongService","findSongById","songId","accessToken","options","method","hostname","path","headers","Origin","Authorization","maxRedirects","Promise","resolve","reject","data","final","request","https","response","on","chunk","result","JSON","parse","credits","relationships","forEach","element","title","attributes","names","map","items","name","push","err","end","Service"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBAPW;gDAIN;;;;;;;;;;;;AAGX,IAAA,AAAMA,cAAN,MAAMA;IACX,MAAaC,aAAaC,MAAc,EAAEC,WAAmB,EAAgB;QAC3E,MAAMC,UAAU;YACdC,QAAQ;YACRC,UAAU;YACVC,MAAM,CAAC,qBAAqB,EAAEL,OAAO,gBAAgB,CAAC;YACtDM,SAAS;gBACPC,QAAQ;gBACRC,eAAe,CAAC,OAAO,EAAEP,YAAY,CAAC;YACxC;YACAQ,cAAc;QAChB;QAEA,OAAO,IAAIC,QAAQ,SAAUC,OAAO,EAAEC,MAAM;YAC1C,IAAIC,OAAO;YACX,MAAMC,QAAQ,EAAE;YAChB,MAAMC,UAAUC,cAAK,CAACD,OAAO,CAACb,SAASe,CAAAA;gBACrCA,SAASC,EAAE,CAAC,QAAQC,CAAAA;oBAClBN,QAAQM;gBACV;gBACAF,SAASC,EAAE,CAAC,OAAO;oBACjB,MAAME,SAASC,KAAKC,KAAK,CAACT;oBAC1B,MAAMU,UAAUH,OAAOP,IAAI,CAAC,EAAE,CAACW,aAAa,CAACD,OAAO,CAACV,IAAI;oBAEzDU,QAAQE,OAAO,CAACC,CAAAA;wBACd,MAAMC,QAAQD,QAAQE,UAAU,CAACD,KAAK;wBACtC,MAAME,QAAQH,QAAQF,aAAa,CAAC,iBAAiB,CAACX,IAAI,CAACiB,GAAG,CAACC,CAAAA,QAASA,MAAMH,UAAU,CAACI,IAAI;wBAC7FlB,MAAMmB,IAAI,CAAC;4BAAEN,OAAOA;4BAAOE,OAAOA;wBAAM;oBAC1C;oBACAlB,QAAQG;gBACV;YACF;YAEAC,QAAQG,EAAE,CAAC,SAASgB,CAAAA;gBAClBtB,OAAOsB;YACT;YAEAnB,QAAQoB,GAAG;QACb;IACF;AAWF;AAlDarC;IADZsC,IAAAA,eAAO;GACKtC"}